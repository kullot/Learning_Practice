# 목차 
- 데이타베이스 개론 
- SQLite3 개요 
- SQLite3 작업환경 구축 (CLI, GUI)
- sqlitebrowser 사용법
- sqlite command line 사용법
- SQL 개요
- SELECT
- CRUD
- ALTER TABLE
- CSV import
- SQL 퀴즈

# --------------------------------
// 데이타베이스란?
 - 데이타를 저장하는 저장장소
 - 엑셀 => 액세스

데이타베이스 종류
- 관계형 데이타베이스
  : 테이블 형태
   필드명(컬럼)
   레코드(행)
  : 오라클, mySQL, MARIAdb, SQLite

- No SQL : 문서단위
   몽고DB

- SQL
-  관계형 데이타베이스 조작언어(CRUD)
-  대소문자 구분하지 않는다.
   명령은 대부분 대문자로 사용
-  명령어뒤에 세미콜른(;)으로 종료

# --------------------------------
// sqlite
- 소규모 프로젝트 적합
- python에 내장모듈로 연동 가능
- 별도의 설치프로그램이 필요없다.
- 파일하나가 데이타베이스 하나이다.

// =======================

// SQLite  GUI 도구 

// sqlitebrowser
 : sqlite db의 CRUD 관리프로그램
 : GUI 제공

관련 프로그램 >>
https://sqlitebrowser.org/dl
DB Browser for SQLite
- Standard installer for 64-bit Windows

DB Browser for SQLite - .zip (no installer)
for 64-bit Windows
: 별도 폴더 생성후 압축 해제
: 폴더명은 영문으로만 작성. 바탕화면 X
DB Browser for SQLite.exe 실행

// DB Browser for SQLite 프로그램 사용법 
[ 데이타베이스 단위는? ]
데이타베이스 > 테이블 > 레코드(행)+필드(컬럼)


[데이타베이스 불러오기]
data\test.db

[SQL 명령 실행]
sqlite 편집기 실행은?
  - 블록 지정후 [F5]

// =======================

// SQLite  Command Line 도구 

(1) 다운로드 (윈도우 기준)
https://www.sqlite.org/download.html

sqlite-dll-win64-x64-3350200.zip
(879.43 KiB)	

(2) 별도 폴더에 압축 해제 

// =======================

// SQLite  Command Line 사용법

-- 터미널 창 실행 (윈도우+R, cmd)

-- 데이타베이스 생성
sqlite3 데이터베이스명
예) C:\sqlite>sqlite3 book.db

-- 데이타베이스명 
.db 
.sqlite 
.sqlite3

-- 데이타베이스 연결
sqlite3 데이타베이스명.확장자

예) C:\sqlite>sqlite3 test.db


-- 데이타베이스와의 연결 종료 
.exit

-- 테이블 목록 보기 
.tables

-- 현재 연결된 목록보기 
.databases

-- 테이블 구조 확인 
.schema 테이블명 

-- 컬럼포맷팅 모드 
.mode columns

-- 상단 필드 표시 
.headers on  

-- 옵션 확인 
.show


실습 >>

sqlite>sqlite3 test.db

sqlite>.databases

sqlite>.tables

sqlite>.schema artists

sqlite>SELECT * FROM artists LIMIT 5;

sqlite>.headers on  

sqlite>SELECT * FROM artists LIMIT 5;

sqlite>.mode columns

sqlite>SELECT * FROM artists LIMIT 5;

sqlite>.show

sqlite>.exit


// =======================
// SQL 기본 명령어 

-- SELECT => SQL 출력문
필터링 - 조건에 맞는 레코드 표시

SELECT 필드명 FROM 테이블명 (WHERE 조건절 LIMIT 숫자);

-- 특정 테이블의 전체 레코드 확인
-- SELECT * FROM 테이블명

예) CUSTOMERS 테이블에서 모든 데이타 표시

 SELECT * FROM customers;

-- 특정 테이블의 특정 필드 확인
-- SELECT 필드명1, 필드명2 FROM 테이블명;

예) CUSTOMERS 테이블에서 FirstName, LastName 필드명만 표시

SELECT FirstName, LastName FROM customers;

-- 특정 테이블에서 레코드수 제한하여 출력하기
-- SELECT * FROM 테이블명 LIMIT 숫자;
-- SELECT 필드명1, 필드명2 FROM 테이블명 LIMIT 숫자;

예) CUSTOMERS 테이블에서 5개의 레코드 보기
  SELECT * FROM customers LIMIT 5;


-- WHERE 조건절
--  = , <=, >=, <, > 비교연산자
--   AND, OR, NOT 논리연산자 

-- SELECT 필드명 FROM 테이블명 WHERE 조건절 ;

예) customers 테이블에서 CustomerId 가 10인 레코드 보기

SELECT * FROM customers
		WHERE customerId = 10;

예) CUSTOMERS 테이블에서
     CustomerId 가 10 이거나 30인 레코드 보기

SELECT * FROM customers
	WHERE CustomerId = 10  OR  CustomerId = 30;


예) PLAYLISTS 테이블에서 PlaylistId가 5보다 큰 레코드 보기
SELECT * FROM playlists
	WHERE playlistId > 5;

-- 퀴즈)
예) Albums 테이블에서 AlbumId가 5보다 크고
     ArtistId가 12보다 작은 레코드 보기

 SELECT * FROM albums
	WHERE albumId > 5 AND artistId < 12
	LIMIT 5;


예) emplyees 테이블에서 Title이 IT Staff가 아닌 레코드 보기

  SELECT * FROM employees
        WHERE NOT title = 'IT Staff';


-- 특정 컬럼을 기준으로 정렬하기
-- SELECT * FROM 테이블명
            WHERE 조건절
            ORDER BY 컬럼명1, 컬럼명2 ASC/DESC
            LIMIT 숫자;
-- ASC : 오름차순 / DESC : 내림차순

예) albums 테이블에서 title 컬럼값을 기준으로 정렬하기
    SELECT * FROM albums
           ORDER BY title;

예) albums 테이블에서 title 컬럼값을 기준으로 역정렬하기
    SELECT * FROM albums
           ORDER BY title DESC;

예) playlists 테이블에서 Name 컬럼값을 기준으로 정렬하기
    (Name 컬럼값이 같은 경우에 정렬 기준은 playlistid)
    SELECT * FROM playlists
           ORDER BY name, playlistid DESC;

예) customers 테이블에서 country 필드값이 USA인 레코드를
     customerid 컬럼값을 기준으로 정렬하기

    SELECT * FROM customers
            WHERE country = 'USA'
            ORDER BY customerid;


-- WHERE 필드명 LIKE %서식 == *
   예) 'a%' : a로 시작하는 
-- WHERE 필드명 LIKE _서식 _글자수
   예) 'U__' : U로 시작하고 U뒤의 글자수가 2글자 

예) customers 테이블에서 country 필드값이 U로 시작하는
    레코드만 출력해라

    SELECT * FROM customers
            WHERE country LIKE 'U%';

예) customers 테이블에서 country 필드값이 U로 시작하고
  총 3글자인  레코드만 출력해라

  SELECT * FROM customers
            WHERE country LIKE 'U__';

-- SELECT COUNT(컬럼명) FROM 테이블
        WHERE 절;

예) customers 테이블에서 country 필드값이 U로 시작하는
    레코드의 갯수

SELECT COUNT(country) FROM customers
            WHERE country LIKE 'U%';

퀴즈1) customers 테이블에서 city 필드값이 Paris인
      레코드 갯수는 ?

SELECT COUNT(*) FROM customers
            WHERE city='Paris';

퀴즈2) customers 테이블에서 country 필드값이
      Canada 이거나 Brazil인 레코드 갯수는?

SELECT COUNT(*) FROM customers
            WHERE country='Canada' OR country='Brazil';

퀴즈3) customers 테이블에서 firstname 필드값이
      a로 시작하는 레코드 갯수는?

  SELECT COUNT(*) FROM customers
            WHERE firstname LIKE 'a%';


// =======================

-- 데이타베이스 만들기
   테이블 구조 => 스키마
   필드명과 자료형 지정
   NOT NULL(필수항목) /
   PRIMARY KEY(기준키) /
   AUTOINCREMENT(자동숫자증가)



// =======================

-- 테이블 만들기
   테이블 구조 => 스키마
   필드명과 자료형 지정
   NOT NULL(필수항목) /
   PRIMARY KEY(기준키) /
   AUTOINCREMENT(자동숫자증가)

-- 데이터 타입
NULL  NULL 값
INTEGER  부호있는 정수. 1, 2, 3, 4, 6, or 8 바이트로 저장
REAL  부동 소수점 숫자. 8 바이트로 저장
TEXT  텍스트. UTF-8, UTF-16BE or UTF-16-LE 중 하나에 저장
BLOB  Binary Large OBject. 입력 데이터를 그대로 저장


CREATE TABLE 테이블명 (필드명 자료형 옵션 ....);

CREATE TABLE  student (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	name  TEXT NOT NULL,
	age  INTEGER NOT NULL,
	addr TEXT  DEFAULT "서울"  
);

-- 테이블에 레코드 추가하기
INSERT INTO 테이블명 (컬럼1, 컬럼2...)  VALUES (값1, 값2 ...);

INSERT INTO 테이블명
    VALUES (값1, 값2 ...);

예)
INSERT INTO student (name, age, addr)  VALUES ("김영희", 23, "대구");
INSERT INTO student (name, age)  VALUES ("고길동", 29);



실습 >
sqlite> CREATE TABLE  student (
   ...> id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
   ...> name  TEXT NOT NULL,
   ...> age  INTEGER NOT NULL,
   ...> addr TEXT  DEFAULT "서울"
   ...> );

sqlite> .tables

sqlite> INSERT INTO student (name, age, addr)  VALUES ("김영희", 23, "대구");

sqlite> INSERT INTO student (name, age)  VALUES ("고길동", 29);

sqlite> INSERT INTO student (name, age, addr)  VALUES ("금잔디", 25, "부산");

sqlite> INSERT INTO student (name, age, addr)  VALUES ("이마리", 26, "울산");

sqlite> INSERT INTO student (name, age)  VALUES ("마동탁", 26);

sqlite> SELECT * FROM student;


// =======================

-- 테이블에 레코드 삭제하기
DELETE FROM 테이블명 WHERE 조건절;

예) DELETE FROM student WHERE name="고길동";

-- studentId가 1인 레코드 삭제하기
DELETE FROM student WHERE studentId = 1;


-- 테이블에 레코드 수정하기 
UPDATE 테이블명 SET 컬럼명 1 = 값1, 컬럼명2 = 값2, ... WHERE 조건식;

UPDATE student SET addr = "제주" WHERE name = "마동탁";



// =======================

-- 기존 테이블 복사해서 새로운 테이블 생성하기 
CREATE TABLE 테이블명 AS SELECT * FROM 기존테이블명;

예) CREATE TABLE customers2  AS
         SELECT 
	CustomerId, FirstName, LastName, Country, Email 
	FROM customers LIMIT 12;


-- 테이블 삭제하기 
DROP TABLE 테이블명;

예) DROP TABLE students;


-- 테이블명 변경하기
ALTER TABLE 현재테이블명 RENAME TO 새로운테이블명;

예) ALTER TABLE customers2 RENAME TO customers3;


-- 컬럼 추가하기 
ALTER TABLE 테이블명 ADD COLUMN 컬럼명 자료형;
예) ALTER TABLE customers2 ADD COLUMN City TEXT;

-- 컬럼명 변경하기
ALTER TABLE 테이블명 RENAME COLUMN 컬럼명1 TO 컬럼명2;

-- 컬럼 삭제 / 컬럼 구조 변경하기 
SQLite의 ALTER TABLE에서는 기능을 제공하지 않는다. 


실습 >
sqlite> CREATE TABLE customers2  AS
          SELECT 
          CustomerId, FirstName, LastName, Country, Email 
          FROM customers LIMIT 12;


sqlite> .tables

sqlite> ALTER TABLE customers2 RENAME TO customers3;


// =======================
// csv Import
[파일]-[가져오기]-[CSV ... ]
대화상자에서 csv 파일 선택
첫행에 필드명 포함 선택


.mode csv
.import csv파일경로 테이블명


실습1 >
sqlite> .import usertbl.csv usertbl
sqlite> select * from usertbl;

실습2 >

sqlite>ALTER TABLE usertbl RENAME TO usertbl_old;

sqlite>CREATE TABLE usertbl(
   userID TEXT NOT NULL PRIMARY KEY,
   name TEXT NOT NULL,
   birthYear TEXT,
   addr TEXT,
   mobile1 TEXT,
   mobile2 TEXT,
   height TEXT,
   mDate TEXT
);

sqlite>INSERT INTO usertbl 
	SELECT * FROM usertbl_old;

sqlite> .width 10, 15, 12, 10, 10, 15, 10, 15

sqlite> select * from usertbl;

// =======================
// csv export

.mode csv
.output  csv파일경로
SELECT * FROM 테이블명;

실습>

sqlite> .headers on
sqlite> .mode csv
sqlite> .output data.csv
sqlite> SELECT customerid,firstname,lastname FROM customers;
sqlite> .quit

C:\sqlite>dir *.csv



// =======================
// 참조 
https://wikidocs.net/12453
https://www.sqlitetutorial.net/
https://www.w3resource.com/sqlite/
https://www.py4e.com/html3/15-database
https://www.w3resource.com/sqlite-exercises/
https://youtu.be/nvt16QqaktA?list=PLEOnZ6GeucBX-JiNBWV49vMyh8I57oBTW
https://youtu.be/byHcYRpMgI4
https://youtu.be/K58cSpnGFQQ
https://youtu.be/ZMmukq4MlXc




